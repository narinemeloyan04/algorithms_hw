#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

int LCS(const string& str1, const string& str2) {
    int m = str1.length();
    int k = str2.length();

    vector<vector<int>> dp(m + 1, vector<int>(k + 1, 0));

    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= k; ++j) {
            if (str1[i - 1] == str2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }

    return dp[m][k];
}

int mindeletions(const string& str1, const string& str2) {
    int lcsLength = LCS(str1, str2);

    int deletions = (str1.length() - lcsLength) + (str2.length() - lcsLength);

    return deletions;
}

int main() {
    string str1, str2;
    cout << "Enter first string: ";
    cin >> str1;
    cout << "Enter second string: ";
    cin >> str2;

    int res = mindeletions(str1, str2);

    cout << "Minimum num of deletions to make the strings equal: " << result << endl;

    return 0;
}
